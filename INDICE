INDICE
1.	Diseño
2.	Motivación
3.	Método de utilización
4.	Ejemplos de utilización
5.	Microsoft

1.Diseño

Nuestro proyecto está compuesto por un Arduino UNO, una placa de microcontrolador de código abierto, equipada con conjuntos de pines de entrada y salida tanto digitales 
como analógicos que pueden ser conectados a varias placas de expansión y otros circuitos. Se conectará a través de cables como puente con una protoboard (también llamado
placa de pruebas o placa de inserción), que posee unos orificios conectados eléctricamente entre sí siguiendo un patrón horizontal o vertical y que se empleará para realizar
pruebas de circuitos electrónicos, insertando en ella componentes electrónicos y cables como puente. Está hecho de dos materiales, un aislante y un conductor que conecta los
diversos orificios entre sí. Uno de sus usos principales es la creación y comprobación de prototipos de circuitos electrónicos antes de llegar a la impresión mecánica del 
circuito en sistemas de producción comercial. Por último, cada luz LED tendrá una resistencia para evitar que se pueda dañar tanto el circuito como por la propia luz.


2.Motivación

Nuestra principal motivación a la hora de realizar este proyecto es intentar completar un sistema que pueda utilizarse con fines decorativos y en algunas aplicaciones en 
lenguajes como el código morse. Los leds se encenderán y apagarán desde el pin 1 al 6. Más tarde, se realizará el proceso inverso y los LEDS se encenderán y apagarán desde 
el pin 6 al 1.Esta secuencia se debe repetir de una manera indefinida.


3 y 4. Método y ejemplos de utilización

Gracias a la Ley de Ohm vamos a poder relacionar a través de una sencilla fórmula, voltaje, intensidad y resistencia. La Ley de Ohm establece que la intensidad de la
corriente eléctrica que circula por un conductor eléctrico es directamente proporcional a la diferencia de potencial aplicada e inversamente proporcional a la resistencia 
del mismo, o lo que es lo mismo:
I = V / R
·    Voltaje: también conocido como tensión, es la presión que una fuente eléctrica ejerce sobre las cargas eléctricas (electrones) eºn un circuito eléctrico. Se mide en 
Voltios (V).
·    Intensidad: cantidad de cargas eléctricas, que circulan por un conductor en un momento determinado. Se mide en Amperios (A).
·    Resistencia: oposición que ejerce el cuerpo al paso de la corriente eléctrica. Se mide en Ohmios (Ω).
 
Cuando conectamos un componente electrónico a una placa de Arduino, se ejerce sobre él una diferencia de potencial de ambos extremos, es decir, estará recibiendo una 
tensión de -V.
Los Led que estamos utilizando para la práctica admiten una tensión máxima de - V y para evitar que se puedan dañar tendremos que colocarle una resistencia al circuito. Para 
ello, vamos a calcular el valor de la resistencia siguiendo la Ley de Ohm, es decir, la tensión en el Led tiene que ser 2,1V. Si el pin de Arduino da 5V, el tensión que debe 
circular por la resistencia es -V –V = -V. Por otro lado, la intensidad que circula por el Led es de -mA. Redondeamos el resultado obtenido a un valor de resistencia 
(siempre por encima de su resistencia ideal), obteniendo una resistencia de -Ω, que mirando en la tabla de resistencias corresponde a la resistencia de color rojo-rojo-marrón.


5. Microsoft
Para empezar hemos utilizado estos recursos de microsoft que son ensambladores que proporcionan acceso a la funcionalidad de un programa.
Provienen de la versión .NET Framework 4.8 que se pueden utilizar en Visual Studio 2012 o posteriores 
mediante la instalación del paquete de desarrollador de .NET Framework 4.8.

•	System.Collections.Generic (espacio de nombres) : Contiene interfaces y clases que definen colecciones genéricas, 
lo que permite que los usuarios creen colecciones fuertemente tipadas para proporcionar una mayor seguridad de tipos y un 
rendimiento mejor que los de las colecciones no genéricas fuertemente tipadas.

•	System.ComponentModel (espacio de nombres): Proporciona clases que se usan para implementar el comportamiento de los 
componentes y controles en tiempo de diseño y en tiempo de ejecución. Este espacio de nombres incluye las clases bases y las 
interfaces para implementar atributos y convertidores de tipos, enlazarlos con orígenes de datos y generar licencias para los componentes.

•	System.Data (espacio de nombres):  Ofrece acceso a clases que representan la arquitectura de ADO.NET. ADO.NET permite crear 
componentes que administran datos de varios orígenes de datos con eficacia.

•	System.Drawing (espacio de nombres): Proporciona acceso a la funcionalidad básica de gráficos de GDI+. 
En los espacios de nombres System.Drawing.Drawing2D, System.Drawing.Imaging y System.Drawing.Text se proporciona funcionalidad más avanzada. 

•	System.Linq (espacio de nombres): Proporciona clases e interfaces que admiten consultas que utilizan Language-Integrated Query (LINQ).

•	System.Text (espacio de nombres): Contiene clases que representan codificaciones de caracteres ASCII y Unicode; 
clases base abstractas para convertir bloques de caracteres a y desde bloques de bytes; y una clase auxiliar que 
manipula y da formato a objetos String sin crear instancias intermedias de String.

•	System.Threading.Tasks (espacio de nombres): Proporciona tipos que simplifican la escritura de código simultáneo y asincrónico. 
Los tipos principales son Task, que representa una operación asincrónica que se puede esperar y cancelar, y Task<TResult>, 
que es una tarea que puede devolver un valor. La clase TaskFactory proporciona métodos estáticos para crear e iniciar tareas, 
y la clase TaskScheduler proporciona la infraestructura predeterminada de programación de subprocesos.

•	System.Windows.Forms (espacio de nombres): Contiene clases para crear aplicaciones para Windows que aprovechan 
todas las ventajas de las características de la interfaz de usuario enriquecida disponibles en el sistema operativo Microsoft Windows.

•	System.Speech.Synthesis (espacio de nombres): Contiene clases para inicializar y configurar un motor de síntesis de voz, 
crear mensajes, generar voz, responder a eventos y modificar características de voz.

•	System.IO (espacio de nombres): Contiene tipos que permiten leer y escribir en los archivos y secuencias de datos, 
así como tipos que proporcionan compatibilidad básica con los archivos y directorios.


